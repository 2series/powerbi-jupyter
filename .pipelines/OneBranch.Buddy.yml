#################################################################################
#   Onebranch Pipelines - Buddy MSBuild (CDPXMigrated)                          #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: skip

  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/obinfra/windows/1809/vs2019:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      cg:
        failOnAlert: false

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(OUTPUTROOT)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          ob_artifactBaseName: 'drop'
          ob_sdl_cg_failOnAlert: false

        steps:
          # Custom Versioning - we will build the version using package.json in versioning commands.
          - task: PowerShell@2
            displayName: 'Set Version'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\version.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Add the versioning task after running Version script
          - task: onebranch.pipeline.version@1
            inputs:
              system: 'Custom'
              customVersion: '$(CustomBuildNumber)'

          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '16.x'

          - task: npmAuthenticate@0
            displayName: 'NPM Authenticate'
            inputs:
              workingFile: '$(Build.SourcesDirectory)\.npmrc'

          - task: PowerShell@2
            displayName: 'Restore'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\restore.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            displayName: 'Build'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\build.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            displayName: 'Package'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\package.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Signing the files created by the build and packaging script
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign binaries'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: 'internal_azure_service'
              files_to_sign: 'dist\**;LICENSE.txt;package.json;README.md;powerbiclient\nbextension\static\*.*;**\dist\*.whl;**\*.tgz'
              search_root: '$(Build.SourcesDirectory)'

          # Copying build artifacts to the Output folder
          - task: CopyFiles@2
            displayName: 'Copy Dist to Output folder'
            inputs:
              Contents: |
                $(Build.SourcesDirectory)\dist\**
                $(Build.SourcesDirectory)\LICENSE.txt
                $(Build.SourcesDirectory)\package.json
                $(Build.SourcesDirectory)\README.md
                $(Build.SourcesDirectory)\powerbiclient\nbextension\static\*.*
              TargetFolder: '$(OUTPUTROOT)\outputs\build\build_artifacts'

          # Copying source artifacts to the Output folder
          - task: CopyFiles@2
            displayName: 'Copy Source to Output folder'
            inputs:
              Contents: |
                $(Build.SourcesDirectory)\**
                !.__pycache__\**\*
                !.pipelines\**\*
                !$(Build.SourcesDirectory)\dist\**
                !$(Build.SourcesDirectory)\lib\**
                !$(Build.SourcesDirectory)\demo\**
                !$(Build.SourcesDirectory)\node_modules\**
                !$(Build.SourcesDirectory)\tests\**
                !$(Build.SourcesDirectory)\powerbiclient\tests\**
              TargetFolder: '$(OUTPUTROOT)\outputs\build\source'

          # Copying tgz package and whl to Output folder
          - task: CopyFiles@2
            displayName: 'Copy tgz package and whl file to Output folder'
            inputs:
              Contents: |
                $(Build.SourcesDirectory)\**\dist\*.whl
                $(Build.SourcesDirectory)\**\*.tgz
              TargetFolder: '$(OUTPUTROOT)\outputs\package\Release'

          # Commands to run during the testing stage
          - task: PowerShell@2
            displayName: "Test powerbi-jupyter"
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\test.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Publish the test results - need to specify publishing stage in OneBranch
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            displayName: "Test powerbi-jupyter (PublishTestResults)"
            inputs:
              testResultsFormat: "jasmine"
              testResultsFiles: "**coverage/**/index.html"
              searchFolder: "$(Build.SourcesDirectory)/reports"
              failTaskOnFailedTests: true